{
  "hash": "e7a61fdc42e4c39caf4827fbf83fc650",
  "result": {
    "markdown": "::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.4.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(kableExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggcorrplot)\nlibrary(ggmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Google's Terms of Service: <https://mapsplatform.google.com>\n  Stadia Maps' Terms of Service: <https://stadiamaps.com/terms-of-service/>\n  OpenStreetMap's Tile Usage Policy: <https://operations.osmfoundation.org/policies/tiles/>\nℹ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details.\n```\n:::\n\n```{.r .cell-code}\nlibrary(leaflet)\nds <- read_rds(\"dataset/load_and_clean_data.rds\") \nds \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 224,645 × 13\n   ARREST_DATE PD_DESC   OFNS_DESC LAW_CAT_CD ARREST_PRECINCT AGE_GROUP PERP_SEX\n   <chr>       <chr>     <chr>     <chr>                <dbl> <chr>     <chr>   \n 1 01/03/2023  ROBBERY,… ROBBERY   F                       49 18-24     M       \n 2 01/03/2023  STRANGUL… FELONY A… F                      120 25-44     M       \n 3 01/04/2023  ROBBERY,… ROBBERY   F                       61 <18       M       \n 4 01/04/2023  STRANGUL… FELONY A… F                      114 18-24     M       \n 5 01/05/2023  BURGLARY… BURGLARY  F                       44 25-44     F       \n 6 01/08/2023  ASSAULT … FELONY A… F                       76 25-44     M       \n 7 01/09/2023  ARSON 2,… ARSON     F                       49 25-44     M       \n 8 01/14/2023  ASSAULT … FELONY A… F                       90 25-44     M       \n 9 01/14/2023  ARSON 2,… ARSON     F                       63 25-44     M       \n10 02/03/2023  STRANGUL… FELONY A… F                       34 25-44     M       \n# ℹ 224,635 more rows\n# ℹ 6 more variables: PERP_RACE <chr>, X_COORD_CD <dbl>, Y_COORD_CD <dbl>,\n#   Latitude <dbl>, Longitude <dbl>, `New Georeferenced Column` <chr>\n```\n:::\n\n```{.r .cell-code}\ncrime_counts_by_day <- ds |>\n  group_by(ARREST_DATE) |>\n  summarize(Daily_Crime_Count = n(), .groups = \"drop\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_counts_by_day$ARREST_DATE <- as.Date(crime_counts_by_day$ARREST_DATE)\n\nggplot(crime_counts_by_day, aes(x = ARREST_DATE, y = Daily_Crime_Count)) +\n  geom_line() +  # Use geom_line for time series\n  geom_point(size = 0.5, color = \"blue\") +  # Optional: add points on each date\n  labs(title = \"Daily Crime Counts\",\n       x = \"Date\",\n       y = \"Number of Crimes\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels if necessary\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 221 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 221 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2024-04-08_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Making sure ARREST_DATE is a Date object for ggplot to handle correctly\ncrime_counts_by_day$ARREST_DATE <- as.Date(crime_counts_by_day$ARREST_DATE)\n\n# Create the bar chart\nggplot(crime_counts_by_day, aes(x = ARREST_DATE, y = Daily_Crime_Count)) +\n  geom_col() +  # geom_col is used for bar charts when you have the counts already calculated\n  labs(title = \"Daily Crime Counts\", \n       x = \"Date\", \n       y = \"Number of Crimes\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))  # Adjust the angle of x-axis text to avoid overlap\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 221 rows containing missing values (`position_stack()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2024-04-08_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nds|>\nggplot(aes(LAW_CAT_CD)) +\ngeom_bar(aes(fill = LAW_CAT_CD)) + \ntheme_minimal() +\nlabs(x = 'Types_of_Crimes', y = 'Number of Cases', title = 'Number of Cases by Race') +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](2024-04-08_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_summary <- ds %>%\n  group_by(LAW_CAT_CD) %>%\n  summarize(Incident_Count = n()) %>%\n  arrange(desc(Incident_Count)) %>%\n  top_n(10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSelecting by Incident_Count\n```\n:::\n\n```{.r .cell-code}\n# Group by LAW_CAT_CD and AGE_GROUP, and summarize the count\ncrime_gender_summary <- ds %>%\n  filter(LAW_CAT_CD %in% crime_summary$LAW_CAT_CD) %>%\n  group_by(LAW_CAT_CD, AGE_GROUP) %>%\n  summarize(Incident_Count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'LAW_CAT_CD'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# Create a bar plot\nggplot(crime_gender_summary, aes(x = reorder(LAW_CAT_CD,Incident_Count), y=    \n                                 Incident_Count, fill = AGE_GROUP)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Total Incidents in General Robbery Categories by Age\",\n       x = \"General Robbery Categories\",\n       y = \"Incident Count\",\n       fill = \"Age\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](2024-04-08_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\ncrime_summary <- ds %>%\n  group_by(OFNS_DESC) %>%\n  summarize(Incident_Count = n()) %>%\n  arrange(desc(Incident_Count)) %>%\n  top_n(10)\n# Group by OFNS_DESC and AGE_GROUP, and summarize the count\ncrime_gender_summary <- ds %>%\n  filter(OFNS_DESC %in% crime_summary$OFNS_DESC) %>%\n  group_by(OFNS_DESC, AGE_GROUP) %>%\n  summarize(Incident_Count = n())\n  \n# Create a bar plot\nggplot(crime_gender_summary, aes(x = reorder(OFNS_DESC, Incident_Count), y = Incident_Count, fill = AGE_GROUP)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Total Incidents in Top 10 Robbery Categories by Age\",\n       x = \"Robbery Categories\",\n       y = \"Incident Count\",\n       fill = \"Age\") +\n  theme_minimal() +\n  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))",
    "supporting": [
      "2024-04-08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}