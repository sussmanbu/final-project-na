---
title: "Seventh Blog Post"
subtitle: ""
author: "TEAM 14"
date: "2024-04-29"
draft: false
---


```{r include=F}
library(tidyverse)
library(lubridate)
library(patchwork)
library(pheatmap)
library(gridExtra)
library(data.table)
data <- read_rds("dataset/load_and_clean_data.rds")
data$ARREST_DATE <- as.Date(data$ARREST_DATE, "%m/%d/%Y")
```

```{r echo=FALSE}
get_season <- function(date) {
  month <- month(date)
  year <- year(date)
  if (month %in% c(12, 1, 2)) {
    season <- "Winter"
  } else if (month %in% c(3, 4, 5)) {
    season <- "Spring"
  } else if (month %in% c(6, 7, 8)) {
    season <- "Summer"
  } else {
    season <- "Autumn"
  }
  paste(season, year)
}
```

```{r echo=F}
#cumulative counts 
data$Season <- sapply(data$ARREST_DATE, get_season)
data_filtered <- filter(data, year(ARREST_DATE) %in% c(2022, 2023))

season_counts <- data_filtered %>%
  group_by(Season) %>%
  summarise(Count = n()) %>%
  mutate(Year = substr(Season, 8, 11)) %>%
  mutate(Season = factor(substr(Season, 1, 6), levels = c("Spring", "Summer", "Autumn","Winter"))) %>%
  arrange(Season)

plot_count<-ggplot(season_counts, aes(x = Season, y = Count, fill = Year)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
  scale_fill_manual(values = c("2022" = "steelblue", "2023" = "lightgreen")) +
  theme_minimal() +
  labs(title = "Total Crime Counts per Season", 
       x = "Season", 
       y = "Number of Incidents",
       fill = "Year") 

```

```{r echo=FALSE}
#felcony
data$Season <- sapply(data$ARREST_DATE, get_season)
felony_assault_data <- filter(data, OFNS_DESC == "FELONY ASSAULT", year(ARREST_DATE) %in% c(2022, 2023))

season_felony_count <- felony_assault_data %>%
  group_by(Season) %>%
  summarise(Count = n())%>%
  mutate(Year = substr(Season, 8, 11)) %>%
  mutate(Season = factor(substr(Season, 1, 6), levels = c("Spring", "Summer", "Autumn","Winter"))) %>%
  arrange(Season)
  
plotfa<- ggplot(season_felony_count, aes(x = Season, y = Count, fill = Year)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
  scale_fill_manual(values = c("2022" = "steelblue", "2023" = "lightgreen")) +
  theme_minimal() +
  labs(title = "Felony Assault", 
       x = "Season", 
       y = "Number of Incidents",
       fill = "Year")

```

```{r echo=F}
#petit larceny
data$Season <- sapply(data$ARREST_DATE, get_season)
petit_larceny_data <- filter(data, OFNS_DESC == "PETIT LARCENY", year(ARREST_DATE) %in% c(2022, 2023))

petit_larceny_counts <- petit_larceny_data %>%
  group_by(Season) %>%
  summarise(Count = n()) %>%
  mutate(Year = substr(Season, 8, 11)) %>%
  mutate(Season = factor(substr(Season, 1, 6), levels = c("Spring", "Summer", "Autumn", "Winter"))) %>%
  arrange(Season)

plotpl<- ggplot(petit_larceny_counts, aes(x = Season, y = Count, fill = Year)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
  scale_fill_manual(values = c("2022" = "steelblue", "2023" = "lightgreen")) +
  theme_minimal() +
  labs(title = "Petit Larceny", 
       x = "Season", 
       y = "Number of Incidents",
       fill = "Year")
```

```{r echo=F}
# assault 3
data$Season <- sapply(data$ARREST_DATE, get_season)
assault_3_data <- filter(data, OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES", year(ARREST_DATE) %in% c(2022, 2023))

assault_3_counts <- assault_3_data %>%
  group_by(Season) %>%
  summarise(Count = n()) %>%
  mutate(Year = substr(Season, 8, 11)) %>%
  mutate(Season = factor(substr(Season, 1, 6), levels = c("Spring", "Summer", "Autumn", "Winter"))) %>%
  arrange(Season)

 plota3<- ggplot(assault_3_counts, aes(x = Season, y = Count, fill = Year)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
  scale_fill_manual(values = c("2022" = "steelblue", "2023" = "lightgreen")) +
  theme_minimal() +
  labs(title = "Assault 3 ", 
       x = "Season", 
       y = "Number of Incidents",
       fill = "Year")

```
```{r echo=FALSE}
combine_plot_crime<-plot_count+plota3+plotfa+plotpl+
   plot_layout(nrow = 2, ncol = 2)
combine_plot_crime
```

These 4 graphs shows the total crime counts per season and top 3 crime categories per seasons. It all shows a trend that the crime rate will be higher in Summer and Spring, then it will gradually go lower in Autumn and Winter in 2023.This data suggests a correlation between warmer weather and increased crime rates in New York City, indicating that incidents tend to escalate during warmer periods.


## Model 

```{r echo=FALSE, message=FALSE, warning= FALSE}

ds <- read_rds("dataset/load_and_clean_data.rds") 
daily_crime_count <- ds %>%
  group_by(ARREST_DATE) %>%
  filter(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES")%>%
  summarize(Daily_Count= n(), .groups = 'drop') %>%
  arrange(ARREST_DATE)

ds$ARREST_BORO = as.factor(ds$ARREST_BORO)
ds$ARREST_PRECINCT=as.factor(ds$ARREST_PRECINCT)
ds$AGE_GROUP= as.factor(ds$AGE_GROUP)
ds$PERP_SEX= as.factor(ds$PERP_SEX)
ds$PERP_RACE =as.factor(ds$PERP_RACE)
ds$conditions =as.factor(ds$conditions)

```


```{r echo=FALSE, message=FALSE, warning= FALSE}
library(dplyr)
library(ggplot2)
library(patchwork)
library(lubridate)

# Assuming 'ds' is your dataset and has 'ARREST_DATE', 'PD_DESC', and 'temp' columns

# Prepare the assault data summary
assault_data <- ds %>%
  filter(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES") %>%
  mutate(Month = floor_date(as.Date(ARREST_DATE), "month")) %>%
  group_by(Month) %>%
  summarise(Count = n()) %>%
  ungroup() 

# Prepare the temperature data summary
mean_temp_by_month <- ds %>%
  filter(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES") %>%
  mutate(Month = floor_date(as.Date(ARREST_DATE), "month")) %>%
  group_by(Month) %>%
  summarise(Mean_Temp = mean(temp, na.rm = TRUE)) %>%
  ungroup()

mean_wind_by_month <- ds %>%
  filter(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES") %>%
  mutate(Month = floor_date(as.Date(ARREST_DATE), "month")) %>%
  group_by(Month) %>%
  summarise(Mean_wind = mean(windspeed, na.rm = TRUE)) %>%
  ungroup()


# Join the datasets
correlation_data <- left_join(assault_data, mean_temp_by_month,mean_wind_by_month, by = "Month")%>%
   left_join(mean_wind_by_month, by = "Month")

# Calculate the correlation coefficient between Count and Mean_Temp
correlation_coefficient <- cor(correlation_data$Count, correlation_data$Mean_Temp,use = "complete.obs")

# Output the correlation coefficient
print(correlation_coefficient)

# If you want to plot this correlation, you can use a scatter plot with a smooth line
correlation_plot <- ggplot(correlation_data, aes(x = Mean_Temp, y = Count)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(x = "Average Monthly Temperature (°C)", y = "Count of Assault 3 Crimes", 
       title = "Correlation between Temperature and 'Assault 3' Crime Count")

# Print the correlation plot
print(correlation_plot)

cor_matrix1 <- cor(correlation_data[, c("Count", "Mean_Temp","Mean_wind")], use = "complete.obs")
pheatmap(cor_matrix1, 
         color = colorRampPalette(c("skyblue", "white", "lightgreen"))(200),
         display_numbers = T,
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean",
         clustering_method = "complete")

```


```{r}
assault_data_weekly <- ds %>%
  filter(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES") %>%
  mutate(Week = floor_date(as.Date(ARREST_DATE), "week")) %>%
  group_by(Week) %>%
  summarise(Count = n()) %>%
  ungroup() 

mean_temp_by_week <- ds %>%
  filter(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES") %>%
  mutate(Week = floor_date(as.Date(ARREST_DATE), "week")) %>%
  group_by(Week) %>%
  summarise(Mean_Temp = mean(temp, na.rm = TRUE)) %>%
  ungroup()

mean_wind_by_week <- ds %>%
  filter(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES") %>%
  mutate(Week = floor_date(as.Date(ARREST_DATE), "week")) %>%
  group_by(Week) %>%
  summarise(Mean_Wind = mean(windspeed, na.rm = TRUE)) %>%
  ungroup()

correlation_data_weekly <- left_join(assault_data_weekly, mean_temp_by_week, by = "Week") %>%
  left_join(mean_wind_by_week, by = "Week")

correlation_plot2 <- ggplot(correlation_data_weekly, aes(x = Mean_Temp, y = Count)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(x = "Average Monthly Temperature (°C)", y = "Count of Assault 3 Crimes", 
       title = "Correlation between Temperature and 'Assault 3' Crime Count")

print(correlation_plot2)

cor_matrix2 <- cor(correlation_data_weekly[, c("Count", "Mean_Temp","Mean_Wind")], use = "complete.obs")
pheatmap(cor_matrix2, 
         color = colorRampPalette(c("skyblue", "white", "lightgreen"))(200),
         display_numbers = T,
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean",
         clustering_method = "complete")
```



```{r echo=FALSE, message=FALSE, warning= FALSE}
daily_crime_count <- ds %>%
  group_by(ARREST_DATE) %>%
  filter(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES")%>%
  summarize(Daily_Count= n(), .groups = 'drop') %>%
  arrange(ARREST_DATE)

daily_temperature <- ds %>%
  group_by(ARREST_DATE) %>%
  summarise(Temp = mean(temp, na.rm = TRUE)) %>%
  ungroup()

wind <-ds %>%
  group_by(ARREST_DATE) %>%
  summarise(Wind = mean(windspeed, na.rm = TRUE)) %>%
  ungroup()

daily_data <- daily_crime_count %>%
  left_join(daily_temperature, by = "ARREST_DATE") %>%
  left_join(wind, by = "ARREST_DATE")

cor_matrix3 <- cor(daily_data[, c("Daily_Count", "Temp","Wind")], use = "complete.obs")
pheatmap(cor_matrix3, 
         color = colorRampPalette(c("skyblue", "white", "lightgreen"))(200),
         display_numbers = T,
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean",
         clustering_method = "complete")
```



```{r echo=FALSE, message=FALSE, warning= FALSE}
modweek <- glm(correlation_data_weekly$Count~correlation_data_weekly$Mean_Temp+correlation_data_weekly$Mean_Wind)
summary(modweek)
modmonth <-glm(correlation_data$Count~ correlation_data$Mean_Temp + correlation_data$Mean_wind)
summary(modmonth)
modday <- lm(daily_data$Daily_Count ~ daily_data$Temp +daily_data$Wind)
summary(modday)
```

```{r echo=FALSE, message=FALSE, warning= FALSE}
ds %>% 
  group_by(OFNS_DESC, LAW_CAT_CD, AGE_GROUP, PERP_SEX, PERP_RACE,ARREST_BORO,ARREST_PRECINCT,conditions) %>%
  filter((OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES"))%>%
  count(name = 'y') -> df_y

mod <- glm(y ~  conditions+ AGE_GROUP + PERP_SEX + PERP_RACE+ ARREST_BORO+ ARREST_PRECINCT,
           data = df_y, family = poisson)
summary(mod)
```



## Model

### train the model

### 下面开始建模，先随机抽取80%作为训练集，20%作为验证集
```{r}
ds$y <- ifelse(ds$OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES",1,0)
ds$PD_DESC <- NULL
ds$OFNS_DESC  <- NULL
ds$`New Georeferenced Column` <- NULL
# ds$LAW_CAT_CD <-  NULL
ds$ARREST_PRECINCT <- as.factor(ds$ARREST_PRECINCT)

set.seed(123)
size <- round(dim(ds)[1]*0.8)
index <- sample(1:dim(ds)[1],size ,replace = F)
data_train <- ds[index,]
data_valid <- ds[-index,]

```


```{r echo=FALSE, message=FALSE, warning= FALSE}
model_lr <- glm(y ~ .
                , family = binomial
                , data = data_train)
```

```{r}
summary(model_lr)
```

### Polish our graphs and charts

Titles and Labels: We are going to craft clear, descriptive titles and axis labels that succinctly convey the meaning of the data, and use numbers to label each in sequence.

Legends: We need to ensure legends are clear and correctly positioned. Modify legend titles to be informative and concise. Use a color scale that is intuitive and provides good contrast for the data represented.

Captions: we need to include captions that explain the visualization in a bit more detail, highlighting key findings or noting any caveats about the data.

Scales and Breaks: We decide to adjust scales and breaks on axes to make sure they are appropriate for the data’s range and distribution. 

Color Choices: We will ensure consistency across multiple visualizations, with the same color schemes, label formats, and styles used throughout.


We are planning to add a interactive graph that could brief will the crime variables in our dataset.



